/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrifttest.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-09")
public class TestData implements org.apache.thrift.TBase<TestData, TestData._Fields>, java.io.Serializable, Cloneable, Comparable<TestData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestData");

  private static final org.apache.thrift.protocol.TField B1_FIELD_DESC = new org.apache.thrift.protocol.TField("b1", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField B2_FIELD_DESC = new org.apache.thrift.protocol.TField("b2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField B3_FIELD_DESC = new org.apache.thrift.protocol.TField("b3", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField B4_FIELD_DESC = new org.apache.thrift.protocol.TField("b4", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField B5_FIELD_DESC = new org.apache.thrift.protocol.TField("b5", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestDataTupleSchemeFactory());
  }

  public boolean b1; // optional
  public int b2; // optional
  public long b3; // optional
  public double b4; // optional
  public String b5; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    B1((short)1, "b1"),
    B2((short)2, "b2"),
    B3((short)3, "b3"),
    B4((short)4, "b4"),
    B5((short)5, "b5");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // B1
          return B1;
        case 2: // B2
          return B2;
        case 3: // B3
          return B3;
        case 4: // B4
          return B4;
        case 5: // B5
          return B5;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __B1_ISSET_ID = 0;
  private static final int __B2_ISSET_ID = 1;
  private static final int __B3_ISSET_ID = 2;
  private static final int __B4_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.B1,_Fields.B2,_Fields.B3,_Fields.B4,_Fields.B5};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.B1, new org.apache.thrift.meta_data.FieldMetaData("b1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.B2, new org.apache.thrift.meta_data.FieldMetaData("b2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.B3, new org.apache.thrift.meta_data.FieldMetaData("b3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.B4, new org.apache.thrift.meta_data.FieldMetaData("b4", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.B5, new org.apache.thrift.meta_data.FieldMetaData("b5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestData.class, metaDataMap);
  }

  public TestData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestData(TestData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.b1 = other.b1;
    this.b2 = other.b2;
    this.b3 = other.b3;
    this.b4 = other.b4;
    if (other.isSetB5()) {
      this.b5 = other.b5;
    }
  }

  public TestData deepCopy() {
    return new TestData(this);
  }

  @Override
  public void clear() {
    setB1IsSet(false);
    this.b1 = false;
    setB2IsSet(false);
    this.b2 = 0;
    setB3IsSet(false);
    this.b3 = 0;
    setB4IsSet(false);
    this.b4 = 0.0;
    this.b5 = null;
  }

  public boolean isB1() {
    return this.b1;
  }

  public TestData setB1(boolean b1) {
    this.b1 = b1;
    setB1IsSet(true);
    return this;
  }

  public void unsetB1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B1_ISSET_ID);
  }

  /** Returns true if field b1 is set (has been assigned a value) and false otherwise */
  public boolean isSetB1() {
    return EncodingUtils.testBit(__isset_bitfield, __B1_ISSET_ID);
  }

  public void setB1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B1_ISSET_ID, value);
  }

  public int getB2() {
    return this.b2;
  }

  public TestData setB2(int b2) {
    this.b2 = b2;
    setB2IsSet(true);
    return this;
  }

  public void unsetB2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B2_ISSET_ID);
  }

  /** Returns true if field b2 is set (has been assigned a value) and false otherwise */
  public boolean isSetB2() {
    return EncodingUtils.testBit(__isset_bitfield, __B2_ISSET_ID);
  }

  public void setB2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B2_ISSET_ID, value);
  }

  public long getB3() {
    return this.b3;
  }

  public TestData setB3(long b3) {
    this.b3 = b3;
    setB3IsSet(true);
    return this;
  }

  public void unsetB3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B3_ISSET_ID);
  }

  /** Returns true if field b3 is set (has been assigned a value) and false otherwise */
  public boolean isSetB3() {
    return EncodingUtils.testBit(__isset_bitfield, __B3_ISSET_ID);
  }

  public void setB3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B3_ISSET_ID, value);
  }

  public double getB4() {
    return this.b4;
  }

  public TestData setB4(double b4) {
    this.b4 = b4;
    setB4IsSet(true);
    return this;
  }

  public void unsetB4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B4_ISSET_ID);
  }

  /** Returns true if field b4 is set (has been assigned a value) and false otherwise */
  public boolean isSetB4() {
    return EncodingUtils.testBit(__isset_bitfield, __B4_ISSET_ID);
  }

  public void setB4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B4_ISSET_ID, value);
  }

  public String getB5() {
    return this.b5;
  }

  public TestData setB5(String b5) {
    this.b5 = b5;
    return this;
  }

  public void unsetB5() {
    this.b5 = null;
  }

  /** Returns true if field b5 is set (has been assigned a value) and false otherwise */
  public boolean isSetB5() {
    return this.b5 != null;
  }

  public void setB5IsSet(boolean value) {
    if (!value) {
      this.b5 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case B1:
      if (value == null) {
        unsetB1();
      } else {
        setB1((Boolean)value);
      }
      break;

    case B2:
      if (value == null) {
        unsetB2();
      } else {
        setB2((Integer)value);
      }
      break;

    case B3:
      if (value == null) {
        unsetB3();
      } else {
        setB3((Long)value);
      }
      break;

    case B4:
      if (value == null) {
        unsetB4();
      } else {
        setB4((Double)value);
      }
      break;

    case B5:
      if (value == null) {
        unsetB5();
      } else {
        setB5((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case B1:
      return isB1();

    case B2:
      return getB2();

    case B3:
      return getB3();

    case B4:
      return getB4();

    case B5:
      return getB5();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case B1:
      return isSetB1();
    case B2:
      return isSetB2();
    case B3:
      return isSetB3();
    case B4:
      return isSetB4();
    case B5:
      return isSetB5();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestData)
      return this.equals((TestData)that);
    return false;
  }

  public boolean equals(TestData that) {
    if (that == null)
      return false;

    boolean this_present_b1 = true && this.isSetB1();
    boolean that_present_b1 = true && that.isSetB1();
    if (this_present_b1 || that_present_b1) {
      if (!(this_present_b1 && that_present_b1))
        return false;
      if (this.b1 != that.b1)
        return false;
    }

    boolean this_present_b2 = true && this.isSetB2();
    boolean that_present_b2 = true && that.isSetB2();
    if (this_present_b2 || that_present_b2) {
      if (!(this_present_b2 && that_present_b2))
        return false;
      if (this.b2 != that.b2)
        return false;
    }

    boolean this_present_b3 = true && this.isSetB3();
    boolean that_present_b3 = true && that.isSetB3();
    if (this_present_b3 || that_present_b3) {
      if (!(this_present_b3 && that_present_b3))
        return false;
      if (this.b3 != that.b3)
        return false;
    }

    boolean this_present_b4 = true && this.isSetB4();
    boolean that_present_b4 = true && that.isSetB4();
    if (this_present_b4 || that_present_b4) {
      if (!(this_present_b4 && that_present_b4))
        return false;
      if (this.b4 != that.b4)
        return false;
    }

    boolean this_present_b5 = true && this.isSetB5();
    boolean that_present_b5 = true && that.isSetB5();
    if (this_present_b5 || that_present_b5) {
      if (!(this_present_b5 && that_present_b5))
        return false;
      if (!this.b5.equals(that.b5))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_b1 = true && (isSetB1());
    list.add(present_b1);
    if (present_b1)
      list.add(b1);

    boolean present_b2 = true && (isSetB2());
    list.add(present_b2);
    if (present_b2)
      list.add(b2);

    boolean present_b3 = true && (isSetB3());
    list.add(present_b3);
    if (present_b3)
      list.add(b3);

    boolean present_b4 = true && (isSetB4());
    list.add(present_b4);
    if (present_b4)
      list.add(b4);

    boolean present_b5 = true && (isSetB5());
    list.add(present_b5);
    if (present_b5)
      list.add(b5);

    return list.hashCode();
  }

  @Override
  public int compareTo(TestData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetB1()).compareTo(other.isSetB1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b1, other.b1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB2()).compareTo(other.isSetB2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b2, other.b2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB3()).compareTo(other.isSetB3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b3, other.b3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB4()).compareTo(other.isSetB4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b4, other.b4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB5()).compareTo(other.isSetB5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b5, other.b5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestData(");
    boolean first = true;

    if (isSetB1()) {
      sb.append("b1:");
      sb.append(this.b1);
      first = false;
    }
    if (isSetB2()) {
      if (!first) sb.append(", ");
      sb.append("b2:");
      sb.append(this.b2);
      first = false;
    }
    if (isSetB3()) {
      if (!first) sb.append(", ");
      sb.append("b3:");
      sb.append(this.b3);
      first = false;
    }
    if (isSetB4()) {
      if (!first) sb.append(", ");
      sb.append("b4:");
      sb.append(this.b4);
      first = false;
    }
    if (isSetB5()) {
      if (!first) sb.append(", ");
      sb.append("b5:");
      if (this.b5 == null) {
        sb.append("null");
      } else {
        sb.append(this.b5);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestDataStandardSchemeFactory implements SchemeFactory {
    public TestDataStandardScheme getScheme() {
      return new TestDataStandardScheme();
    }
  }

  private static class TestDataStandardScheme extends StandardScheme<TestData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // B1
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.b1 = iprot.readBool();
              struct.setB1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // B2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.b2 = iprot.readI32();
              struct.setB2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // B3
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.b3 = iprot.readI64();
              struct.setB3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // B4
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.b4 = iprot.readDouble();
              struct.setB4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // B5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.b5 = iprot.readString();
              struct.setB5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetB1()) {
        oprot.writeFieldBegin(B1_FIELD_DESC);
        oprot.writeBool(struct.b1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetB2()) {
        oprot.writeFieldBegin(B2_FIELD_DESC);
        oprot.writeI32(struct.b2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetB3()) {
        oprot.writeFieldBegin(B3_FIELD_DESC);
        oprot.writeI64(struct.b3);
        oprot.writeFieldEnd();
      }
      if (struct.isSetB4()) {
        oprot.writeFieldBegin(B4_FIELD_DESC);
        oprot.writeDouble(struct.b4);
        oprot.writeFieldEnd();
      }
      if (struct.b5 != null) {
        if (struct.isSetB5()) {
          oprot.writeFieldBegin(B5_FIELD_DESC);
          oprot.writeString(struct.b5);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestDataTupleSchemeFactory implements SchemeFactory {
    public TestDataTupleScheme getScheme() {
      return new TestDataTupleScheme();
    }
  }

  private static class TestDataTupleScheme extends TupleScheme<TestData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetB1()) {
        optionals.set(0);
      }
      if (struct.isSetB2()) {
        optionals.set(1);
      }
      if (struct.isSetB3()) {
        optionals.set(2);
      }
      if (struct.isSetB4()) {
        optionals.set(3);
      }
      if (struct.isSetB5()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetB1()) {
        oprot.writeBool(struct.b1);
      }
      if (struct.isSetB2()) {
        oprot.writeI32(struct.b2);
      }
      if (struct.isSetB3()) {
        oprot.writeI64(struct.b3);
      }
      if (struct.isSetB4()) {
        oprot.writeDouble(struct.b4);
      }
      if (struct.isSetB5()) {
        oprot.writeString(struct.b5);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.b1 = iprot.readBool();
        struct.setB1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.b2 = iprot.readI32();
        struct.setB2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.b3 = iprot.readI64();
        struct.setB3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.b4 = iprot.readDouble();
        struct.setB4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.b5 = iprot.readString();
        struct.setB5IsSet(true);
      }
    }
  }

}

